{
  "openapi": "3.0.1",
  "info": {
    "title": "Gooding LexisNexis Api Documentation",
    "version": "1.2.0"
  },
  "servers": [
    {
      "url": "https://cs29.salesforce.com/"
    }
  ],
  "tags": [
    {
      "name": "Authorization",
      "description": "Basic authorization check and send otp if passed"
    },
    {
      "name": "Verify OTP With Person Account",
      "description": "Submit OTP to verify"
    },
    {
      "name": "Verify OTP With Person JSON",
      "description": "Submit OTP to verify"
    }
  ],
  "paths": {
    "/services/apexrest/lexisnexis/auth": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Use for InstantId/FraudPoint/IVI verification",
        "description": "Fraudpoint & InstantId Flow(For Domestic) / IVI check(For International)\n",
        "operationId": "Auth_check",
        "parameters": [],
        "requestBody": {
          "description": "Set Domestic to true for domestic users and false for International. <b>AccountId</b> is required to match with a salesforce user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestBody"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "200 OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                },
                "example": {
                  "txnReasonCode": [
                    {
                      "Description": "Pend: FraudPoint verification failed",
                      "Code": "pend_fraudpoint_thresholds_not_met"
                    }
                  ],
                  "stepExcuted": "InstantId & FraudPoint",
                  "status": "Fail",
                  "conversationId": "31000313223629",
                  "contactStatus": {
                    "status": "Created",
                    "personContactId": "0030r00000JW3anAAD",
                    "personAccountId": "0010r00000IVD8eAAH"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/services/apexrest/lexisnexis/otp": {
      "put": {
        "tags": [
          "Verify OTP With Person JSON"
        ],
        "description": "Use for submittiong OTP",
        "parameters": [],
        "requestBody": {
          "description": "Use the same conversationId returned by Post response.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Passcode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "txnReasonCode": {
                    "Code": "otp_fail_invalid_passcode"
                  },
                  "stepExcuted": "OTP Verification",
                  "status": "failed",
                  "conversationId": "31000341963768",
                  "contactStatus": {
                    "status": "failed",
                    "personContactId": "0030r00000KtzmIAAR",
                    "personAccountId": "0010r00000Jy7NaAAJ"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "Verify OTP With Person JSON"
        ],
        "description": "Use for sending OTP to applicant using person JSON",
        "parameters": [],
        "requestBody": {
          "description": "Use different value for Method and Language in otpDeliveryMethod. Available methods are email(E), text(T), Call(M) and available languages are English(EN), French(FR), Spanish(ES)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestBodyOTP"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "txnReasonCode": [],
                  "stepExcuted": "Send OTP",
                  "status": "pending",
                  "conversationId": "31000341963768",
                  "contactStatus": {
                    "status": "pending",
                    "personContactId": "0030r00000KtzmIAAR",
                    "personAccountId": "0010r00000Jy7NaAAJ"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/services/apexrest/lexisnexis/bidsubmission": {
      "post": {
        "tags": [
          "submit bid"
        ],
        "description": "This endpoint lets you save the <b>Register to bid submission</b> data into Salesforce.\n\n ><b>*Note*</b> : </b> For this endpoint you either need <b>*personEmail*</b> or <b>*personAccountId*</b> is required.",
        "parameters": [],
        "requestBody": {
          "description": "In the body you can assign any new field by their <b>*API*</b> name, per example if you want to update the <b>Bidding Limit</b>, in that case you have to use <b>*Bidding_Limit__c*</b> field in the body with the updated value",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bidbody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "uploadDocumentLink": "https://cs29.salesforce.com/services/data/v47.0/sobjects/ContentVersion",
                  "success": true,
                  "firstPublishLocationId": "0010r00000AVtqtAAD"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/services/data/v47.0/sobjects/ContentVersion": {
      "post": {
        "tags": [
          "Upload  file"
        ],
        "description": "After submiting the bid information, in the response we will get an <b>*uploadDocumentLink*</b> and <b>*firstPublishLocationId*</b>(which is the person account id), using those we will upload document.\n\n ><b>firstPublishLocationId </b>: Will go to *entity_content*'s FirstPublishLocationId field\n\n ><b>uploadDocumentLink </b> : will be used as a *endpoint*",
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "versionData": {
                    "type": "string",
                    "format": "base64"
                  },
                  "entity-content": {
                    "type": "object",
                    "properties": {
                      "Title": {
                        "type": "string"
                      },
                      "PathOnClient": {
                        "type": "string"
                      },
                      "FirstPublishLocationId": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "id": "0680r000000PwofAAC",
                  "success": true,
                  "errors": []
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/services/apexrest/lexisnexis/otp/account": {
      "post": {
        "tags": [
          "Verify OTP With Person Account"
        ],
        "description": "Use for sending OTP to applicant by using their person account Id",
        "parameters": [
          {
            "name": "bearerAuth",
            "in": "header",
            "description": "Bearer {sessionId}\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Use different value for Method and Language in otpDeliveryMethod. Available methods are email(E), text(T), Call(M) and available languages are English(EN), French(FR), Spanish(ES)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestBodyOTPAcc"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "txnReasonCode": [],
                  "stepExcuted": "Send OTP",
                  "status": "pending",
                  "conversationId": "31000341963768",
                  "contactStatus": {
                    "status": "pending",
                    "personContactId": "0030r00000KtzmIAAR",
                    "personAccountId": "0010r00000Jy7NaAAJ"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    }
  },
  "components": {
    "schemas": {
      "Person": {
        "type": "object",
        "properties": {
          "Name": {
            "$ref": "#/components/schemas/Name"
          },
          "Addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "Phones": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Phones"
            }
          },
          "Emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "AccountId": {
            "type": "string",
            "example": "0013F00000Xot"
          },
          "Context": {
            "type": "string",
            "example": "primary"
          }
        }
      },
      "RequestBody": {
        "required": [
          "domestic"
        ],
        "type": "object",
        "properties": {
          "domestic": {
            "type": "boolean",
            "example": true
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          }
        }
      },
      "RequestBodyOTP": {
        "required": [
          "domestic",
          "person"
        ],
        "type": "object",
        "properties": {
          "domestic": {
            "type": "boolean",
            "example": true
          },
          "personAccountId": {
            "type": "string",
            "example": "0010r00000Jy7NaAAJ"
          },
          "otpDeliveryInfo": {
            "$ref": "#/components/schemas/OtpDeliveryInfo"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          }
        }
      },
      "RequestBodyOTPAcc": {
        "required": [
          "domestic"
        ],
        "type": "object",
        "properties": {
          "domestic": {
            "type": "boolean",
            "example": true
          },
          "personAccountId": {
            "type": "string",
            "example": "0010r00000Jy7NaAAJ"
          },
          "otpDeliveryInfo": {
            "$ref": "#/components/schemas/OtpDeliveryInfo"
          }
        }
      },
      "Name": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string",
            "example": "LARRY"
          },
          "LastName": {
            "type": "string",
            "example": "GREEN"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "StreetAddress1": {
            "type": "string",
            "example": "6137 N WASHTENAW AVE"
          },
          "StreetAddress2": {
            "type": "string",
            "example": "Chicago, IL USA"
          },
          "city": {
            "type": "string",
            "example": "CHICAGO"
          },
          "State": {
            "type": "string",
            "example": "IL"
          },
          "Zip5": {
            "type": "string",
            "example": "01507"
          },
          "Country": {
            "type": "string",
            "example": "US"
          },
          "Context": {
            "type": "string",
            "example": "primary"
          }
        }
      },
      "Phones": {
        "type": "object",
        "properties": {
          "Numbr": {
            "type": "string",
            "example": null
          },
          "Context": {
            "type": "string",
            "example": "mobile"
          }
        }
      },
      "Email": {
        "type": "string",
        "example": "ashish.jain@sidebench.com"
      },
      "Passcode": {
        "type": "object",
        "properties": {
          "passcode": {
            "type": "string",
            "example": "953158"
          },
          "personAccountId": {
            "type": "string",
            "example": "0010r00000Jy7NaAAJ"
          },
          "conversationId": {
            "type": "string",
            "example": "31000312954899"
          },
          "domestic": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "bidbody": {
        "type": "object",
        "properties": {
          "personEmail": {
            "type": "string",
            "example": "test.gooding@gmail.com"
          },
          "personAccountId": {
            "type": "string",
            "example": "0010r00000AVtqtAAD"
          },
          "auctionTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "Online-Only"
            ]
          },
          "privacyPolicyTimestamp": {
            "type": "string",
            "example": "2020-06-29T09:33:25.000+0000"
          }
        }
      },
      "contentVersion": {
        "type": "object",
        "properties": {
          "versiondata": {
            "type": "string",
            "example": "file"
          },
          "entity_content": {
            "$ref": "#/components/schemas/entity_content"
          }
        }
      },
      "entity_content": {
        "type": "object",
        "properties": {
          "Title": {
            "type": "string",
            "example": "PDF"
          },
          "PathOnClient": {
            "type": "string",
            "example": "PDF.pdf"
          },
          "FirstPublishLocationId": {
            "type": "string",
            "example": "0010r00000AVtqtAAD"
          }
        }
      },
      "OtpDeliveryInfo": {
        "type": "object",
        "properties": {
          "Method": {
            "type": "string",
            "example": "E"
          },
          "Language": {
            "type": "string",
            "example": "EN"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/failedResponses"
          },
          {
            "$ref": "#/components/schemas/domesticParameterIsRequired"
          },
          {
            "$ref": "#/components/schemas/passedEarlierResponse"
          },
          {
            "$ref": "#/components/schemas/AtleastOneEmailIdIsRequired"
          }
        ]
      },
      "failedResponses": {
        "type": "object",
        "properties": {
          "txnReasonCode": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/value"
            }
          },
          "stepExcuted": {
            "type": "string",
            "example": "InstantId & FraudPoint"
          },
          "status": {
            "type": "string",
            "example": "Failed Earlier"
          },
          "rawResponse": {
            "type": "string",
            "example": null
          },
          "conversationId": {
            "type": "string",
            "example": null
          },
          "contactStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/objVal"
            }
          }
        }
      },
      "value": {
        "type": "object"
      },
      "objVal": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "failed"
          },
          "personContactId": {
            "type": "string",
            "example": "0030r00000JW3anAAD"
          },
          "personAccountId": {
            "type": "string",
            "example": "0010r00000IVD8eAAH"
          }
        }
      },
      "passedEarlierResponse": {
        "type": "object",
        "properties": {
          "txnReasonCode": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/value1"
            }
          },
          "stepExcuted": {
            "type": "string",
            "example": "InstantId & FraudPoint"
          },
          "status": {
            "type": "string",
            "example": "Authorised Earlier"
          },
          "rawResponse": {
            "type": "string",
            "example": null
          },
          "conversationId": {
            "type": "string",
            "example": null
          },
          "contactStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/objVal1"
            }
          }
        }
      },
      "value1": {
        "type": "object"
      },
      "objVal1": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "passed earlier"
          },
          "personContactId": {
            "type": "string",
            "example": "0030r00000JW3anAAD"
          },
          "personAccountId": {
            "type": "string",
            "example": "0010r00000IVD8eAAH"
          }
        }
      },
      "AtleastOneEmailIdIsRequired": {
        "type": "object",
        "properties": {
          "txnReasonCode": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/value1"
            }
          },
          "stepExcuted": {
            "type": "string",
            "example": "InstantId & FraudPoint"
          },
          "status": {
            "type": "string",
            "example": "Atleast one email Id is required"
          },
          "rawResponse": {
            "type": "string",
            "example": null
          },
          "conversationId": {
            "type": "string",
            "example": null
          },
          "contactStatus": {
            "type": "string",
            "example": null
          }
        }
      },
      "domesticParameterIsRequired": {
        "type": "object",
        "properties": {
          "txnReasonCode": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/value1"
            }
          },
          "stepExcuted": {
            "type": "string",
            "example": "InstantId & FraudPoint"
          },
          "status": {
            "type": "string",
            "example": "domestic parameter is Required. Send 'false' for International applications, 'true' otherwise."
          },
          "rawResponse": {
            "type": "string",
            "example": null
          },
          "conversationId": {
            "type": "string",
            "example": null
          },
          "contactStatus": {
            "type": "string",
            "example": null
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": [
    {
      "Authorization": []
    }
  ]
}